// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chatgpt-web-new-go/model"
)

func newUploadRecord(db *gorm.DB, opts ...gen.DOOption) uploadRecord {
	_uploadRecord := uploadRecord{}

	_uploadRecord.uploadRecordDo.UseDB(db, opts...)
	_uploadRecord.uploadRecordDo.UseModel(&model.UploadRecord{})

	tableName := _uploadRecord.uploadRecordDo.TableName()
	_uploadRecord.ALL = field.NewAsterisk(tableName)
	_uploadRecord.ID = field.NewInt32(tableName, "id")
	_uploadRecord.UserID = field.NewInt64(tableName, "user_id")
	_uploadRecord.Mimetype = field.NewString(tableName, "mimetype")
	_uploadRecord.Sha1 = field.NewString(tableName, "sha1")
	_uploadRecord.Md5 = field.NewString(tableName, "md5")
	_uploadRecord.URL = field.NewString(tableName, "url")
	_uploadRecord.Originalname = field.NewString(tableName, "originalname")
	_uploadRecord.Name = field.NewString(tableName, "name")
	_uploadRecord.Type = field.NewString(tableName, "type")
	_uploadRecord.Size = field.NewString(tableName, "size")
	_uploadRecord.Status = field.NewInt32(tableName, "status")
	_uploadRecord.CreateTime = field.NewTime(tableName, "create_time")
	_uploadRecord.UpdateTime = field.NewTime(tableName, "update_time")
	_uploadRecord.IsDelete = field.NewInt32(tableName, "is_delete")

	_uploadRecord.fillFieldMap()

	return _uploadRecord
}

type uploadRecord struct {
	uploadRecordDo

	ALL          field.Asterisk
	ID           field.Int32
	UserID       field.Int64
	Mimetype     field.String
	Sha1         field.String
	Md5          field.String
	URL          field.String
	Originalname field.String
	Name         field.String
	Type         field.String
	Size         field.String
	Status       field.Int32
	CreateTime   field.Time
	UpdateTime   field.Time
	IsDelete     field.Int32

	fieldMap map[string]field.Expr
}

func (u uploadRecord) Table(newTableName string) *uploadRecord {
	u.uploadRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uploadRecord) As(alias string) *uploadRecord {
	u.uploadRecordDo.DO = *(u.uploadRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uploadRecord) updateTableName(table string) *uploadRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.Mimetype = field.NewString(table, "mimetype")
	u.Sha1 = field.NewString(table, "sha1")
	u.Md5 = field.NewString(table, "md5")
	u.URL = field.NewString(table, "url")
	u.Originalname = field.NewString(table, "originalname")
	u.Name = field.NewString(table, "name")
	u.Type = field.NewString(table, "type")
	u.Size = field.NewString(table, "size")
	u.Status = field.NewInt32(table, "status")
	u.CreateTime = field.NewTime(table, "create_time")
	u.UpdateTime = field.NewTime(table, "update_time")
	u.IsDelete = field.NewInt32(table, "is_delete")

	u.fillFieldMap()

	return u
}

func (u *uploadRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uploadRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["mimetype"] = u.Mimetype
	u.fieldMap["sha1"] = u.Sha1
	u.fieldMap["md5"] = u.Md5
	u.fieldMap["url"] = u.URL
	u.fieldMap["originalname"] = u.Originalname
	u.fieldMap["name"] = u.Name
	u.fieldMap["type"] = u.Type
	u.fieldMap["size"] = u.Size
	u.fieldMap["status"] = u.Status
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["is_delete"] = u.IsDelete
}

func (u uploadRecord) clone(db *gorm.DB) uploadRecord {
	u.uploadRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uploadRecord) replaceDB(db *gorm.DB) uploadRecord {
	u.uploadRecordDo.ReplaceDB(db)
	return u
}

type uploadRecordDo struct{ gen.DO }

type IUploadRecordDo interface {
	gen.SubQuery
	Debug() IUploadRecordDo
	WithContext(ctx context.Context) IUploadRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUploadRecordDo
	WriteDB() IUploadRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUploadRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUploadRecordDo
	Not(conds ...gen.Condition) IUploadRecordDo
	Or(conds ...gen.Condition) IUploadRecordDo
	Select(conds ...field.Expr) IUploadRecordDo
	Where(conds ...gen.Condition) IUploadRecordDo
	Order(conds ...field.Expr) IUploadRecordDo
	Distinct(cols ...field.Expr) IUploadRecordDo
	Omit(cols ...field.Expr) IUploadRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUploadRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUploadRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUploadRecordDo
	Group(cols ...field.Expr) IUploadRecordDo
	Having(conds ...gen.Condition) IUploadRecordDo
	Limit(limit int) IUploadRecordDo
	Offset(offset int) IUploadRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUploadRecordDo
	Unscoped() IUploadRecordDo
	Create(values ...*model.UploadRecord) error
	CreateInBatches(values []*model.UploadRecord, batchSize int) error
	Save(values ...*model.UploadRecord) error
	First() (*model.UploadRecord, error)
	Take() (*model.UploadRecord, error)
	Last() (*model.UploadRecord, error)
	Find() ([]*model.UploadRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UploadRecord, err error)
	FindInBatches(result *[]*model.UploadRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UploadRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUploadRecordDo
	Assign(attrs ...field.AssignExpr) IUploadRecordDo
	Joins(fields ...field.RelationField) IUploadRecordDo
	Preload(fields ...field.RelationField) IUploadRecordDo
	FirstOrInit() (*model.UploadRecord, error)
	FirstOrCreate() (*model.UploadRecord, error)
	FindByPage(offset int, limit int) (result []*model.UploadRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUploadRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.UploadRecord, err error)
}

// FilterWithNameAndRole SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (u uploadRecordDo) FilterWithNameAndRole(name string, role string) (result []model.UploadRecord, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM upload_record WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u uploadRecordDo) Debug() IUploadRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u uploadRecordDo) WithContext(ctx context.Context) IUploadRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uploadRecordDo) ReadDB() IUploadRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u uploadRecordDo) WriteDB() IUploadRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u uploadRecordDo) Session(config *gorm.Session) IUploadRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u uploadRecordDo) Clauses(conds ...clause.Expression) IUploadRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uploadRecordDo) Returning(value interface{}, columns ...string) IUploadRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uploadRecordDo) Not(conds ...gen.Condition) IUploadRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uploadRecordDo) Or(conds ...gen.Condition) IUploadRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uploadRecordDo) Select(conds ...field.Expr) IUploadRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uploadRecordDo) Where(conds ...gen.Condition) IUploadRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uploadRecordDo) Order(conds ...field.Expr) IUploadRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uploadRecordDo) Distinct(cols ...field.Expr) IUploadRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uploadRecordDo) Omit(cols ...field.Expr) IUploadRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uploadRecordDo) Join(table schema.Tabler, on ...field.Expr) IUploadRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uploadRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUploadRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uploadRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUploadRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uploadRecordDo) Group(cols ...field.Expr) IUploadRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uploadRecordDo) Having(conds ...gen.Condition) IUploadRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uploadRecordDo) Limit(limit int) IUploadRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uploadRecordDo) Offset(offset int) IUploadRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uploadRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUploadRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uploadRecordDo) Unscoped() IUploadRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uploadRecordDo) Create(values ...*model.UploadRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uploadRecordDo) CreateInBatches(values []*model.UploadRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uploadRecordDo) Save(values ...*model.UploadRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uploadRecordDo) First() (*model.UploadRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadRecord), nil
	}
}

func (u uploadRecordDo) Take() (*model.UploadRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadRecord), nil
	}
}

func (u uploadRecordDo) Last() (*model.UploadRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadRecord), nil
	}
}

func (u uploadRecordDo) Find() ([]*model.UploadRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UploadRecord), err
}

func (u uploadRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UploadRecord, err error) {
	buf := make([]*model.UploadRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uploadRecordDo) FindInBatches(result *[]*model.UploadRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uploadRecordDo) Attrs(attrs ...field.AssignExpr) IUploadRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uploadRecordDo) Assign(attrs ...field.AssignExpr) IUploadRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uploadRecordDo) Joins(fields ...field.RelationField) IUploadRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uploadRecordDo) Preload(fields ...field.RelationField) IUploadRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uploadRecordDo) FirstOrInit() (*model.UploadRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadRecord), nil
	}
}

func (u uploadRecordDo) FirstOrCreate() (*model.UploadRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadRecord), nil
	}
}

func (u uploadRecordDo) FindByPage(offset int, limit int) (result []*model.UploadRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uploadRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uploadRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uploadRecordDo) Delete(models ...*model.UploadRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uploadRecordDo) withDO(do gen.Dao) *uploadRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
