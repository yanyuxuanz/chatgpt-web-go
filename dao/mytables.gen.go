// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chatgpt-web-new-go/model"
)

func newMytable(db *gorm.DB, opts ...gen.DOOption) mytable {
	_mytable := mytable{}

	_mytable.mytableDo.UseDB(db, opts...)
	_mytable.mytableDo.UseModel(&model.Mytable{})

	tableName := _mytable.mytableDo.TableName()
	_mytable.ALL = field.NewAsterisk(tableName)
	_mytable.ID = field.NewInt32(tableName, "ID")
	_mytable.Username = field.NewString(tableName, "username")
	_mytable.Age = field.NewInt32(tableName, "age")
	_mytable.Phone = field.NewString(tableName, "phone")

	_mytable.fillFieldMap()

	return _mytable
}

type mytable struct {
	mytableDo

	ALL      field.Asterisk
	ID       field.Int32
	Username field.String
	Age      field.Int32
	Phone    field.String

	fieldMap map[string]field.Expr
}

func (m mytable) Table(newTableName string) *mytable {
	m.mytableDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mytable) As(alias string) *mytable {
	m.mytableDo.DO = *(m.mytableDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mytable) updateTableName(table string) *mytable {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "ID")
	m.Username = field.NewString(table, "username")
	m.Age = field.NewInt32(table, "age")
	m.Phone = field.NewString(table, "phone")

	m.fillFieldMap()

	return m
}

func (m *mytable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mytable) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["ID"] = m.ID
	m.fieldMap["username"] = m.Username
	m.fieldMap["age"] = m.Age
	m.fieldMap["phone"] = m.Phone
}

func (m mytable) clone(db *gorm.DB) mytable {
	m.mytableDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mytable) replaceDB(db *gorm.DB) mytable {
	m.mytableDo.ReplaceDB(db)
	return m
}

type mytableDo struct{ gen.DO }

type IMytableDo interface {
	gen.SubQuery
	Debug() IMytableDo
	WithContext(ctx context.Context) IMytableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMytableDo
	WriteDB() IMytableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMytableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMytableDo
	Not(conds ...gen.Condition) IMytableDo
	Or(conds ...gen.Condition) IMytableDo
	Select(conds ...field.Expr) IMytableDo
	Where(conds ...gen.Condition) IMytableDo
	Order(conds ...field.Expr) IMytableDo
	Distinct(cols ...field.Expr) IMytableDo
	Omit(cols ...field.Expr) IMytableDo
	Join(table schema.Tabler, on ...field.Expr) IMytableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMytableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMytableDo
	Group(cols ...field.Expr) IMytableDo
	Having(conds ...gen.Condition) IMytableDo
	Limit(limit int) IMytableDo
	Offset(offset int) IMytableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMytableDo
	Unscoped() IMytableDo
	Create(values ...*model.Mytable) error
	CreateInBatches(values []*model.Mytable, batchSize int) error
	Save(values ...*model.Mytable) error
	First() (*model.Mytable, error)
	Take() (*model.Mytable, error)
	Last() (*model.Mytable, error)
	Find() ([]*model.Mytable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Mytable, err error)
	FindInBatches(result *[]*model.Mytable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Mytable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMytableDo
	Assign(attrs ...field.AssignExpr) IMytableDo
	Joins(fields ...field.RelationField) IMytableDo
	Preload(fields ...field.RelationField) IMytableDo
	FirstOrInit() (*model.Mytable, error)
	FirstOrCreate() (*model.Mytable, error)
	FindByPage(offset int, limit int) (result []*model.Mytable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMytableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.Mytable, err error)
}

// FilterWithNameAndRole SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (m mytableDo) FilterWithNameAndRole(name string, role string) (result []model.Mytable, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM mytables WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mytableDo) Debug() IMytableDo {
	return m.withDO(m.DO.Debug())
}

func (m mytableDo) WithContext(ctx context.Context) IMytableDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mytableDo) ReadDB() IMytableDo {
	return m.Clauses(dbresolver.Read)
}

func (m mytableDo) WriteDB() IMytableDo {
	return m.Clauses(dbresolver.Write)
}

func (m mytableDo) Session(config *gorm.Session) IMytableDo {
	return m.withDO(m.DO.Session(config))
}

func (m mytableDo) Clauses(conds ...clause.Expression) IMytableDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mytableDo) Returning(value interface{}, columns ...string) IMytableDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mytableDo) Not(conds ...gen.Condition) IMytableDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mytableDo) Or(conds ...gen.Condition) IMytableDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mytableDo) Select(conds ...field.Expr) IMytableDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mytableDo) Where(conds ...gen.Condition) IMytableDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mytableDo) Order(conds ...field.Expr) IMytableDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mytableDo) Distinct(cols ...field.Expr) IMytableDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mytableDo) Omit(cols ...field.Expr) IMytableDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mytableDo) Join(table schema.Tabler, on ...field.Expr) IMytableDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mytableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMytableDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mytableDo) RightJoin(table schema.Tabler, on ...field.Expr) IMytableDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mytableDo) Group(cols ...field.Expr) IMytableDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mytableDo) Having(conds ...gen.Condition) IMytableDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mytableDo) Limit(limit int) IMytableDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mytableDo) Offset(offset int) IMytableDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mytableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMytableDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mytableDo) Unscoped() IMytableDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mytableDo) Create(values ...*model.Mytable) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mytableDo) CreateInBatches(values []*model.Mytable, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mytableDo) Save(values ...*model.Mytable) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mytableDo) First() (*model.Mytable, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mytable), nil
	}
}

func (m mytableDo) Take() (*model.Mytable, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mytable), nil
	}
}

func (m mytableDo) Last() (*model.Mytable, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mytable), nil
	}
}

func (m mytableDo) Find() ([]*model.Mytable, error) {
	result, err := m.DO.Find()
	return result.([]*model.Mytable), err
}

func (m mytableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Mytable, err error) {
	buf := make([]*model.Mytable, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mytableDo) FindInBatches(result *[]*model.Mytable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mytableDo) Attrs(attrs ...field.AssignExpr) IMytableDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mytableDo) Assign(attrs ...field.AssignExpr) IMytableDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mytableDo) Joins(fields ...field.RelationField) IMytableDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mytableDo) Preload(fields ...field.RelationField) IMytableDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mytableDo) FirstOrInit() (*model.Mytable, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mytable), nil
	}
}

func (m mytableDo) FirstOrCreate() (*model.Mytable, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Mytable), nil
	}
}

func (m mytableDo) FindByPage(offset int, limit int) (result []*model.Mytable, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mytableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mytableDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mytableDo) Delete(models ...*model.Mytable) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mytableDo) withDO(do gen.Dao) *mytableDo {
	m.DO = *do.(*gen.DO)
	return m
}
