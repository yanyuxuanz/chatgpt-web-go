// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Action           *action
	Aikey            *aikey
	AmountDetail     *amountDetail
	Carmi            *carmi
	Cashback         *cashback
	Config           *config
	Dialog           *dialog
	DrawRecord       *drawRecord
	InstalledPlugin  *installedPlugin
	InviteRecord     *inviteRecord
	Message          *message
	Notification     *notification
	Order            *order
	Payment          *payment
	Persona          *persona
	Plugin           *plugin
	Product          *product
	Reward           *reward
	Signin           *signin
	Turnover         *turnover
	UploadRecord     *uploadRecord
	User             *user
	WithdrawalRecord *withdrawalRecord
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Action = &Q.Action
	Aikey = &Q.Aikey
	AmountDetail = &Q.AmountDetail
	Carmi = &Q.Carmi
	Cashback = &Q.Cashback
	Config = &Q.Config
	Dialog = &Q.Dialog
	DrawRecord = &Q.DrawRecord
	InstalledPlugin = &Q.InstalledPlugin
	InviteRecord = &Q.InviteRecord
	Message = &Q.Message
	Notification = &Q.Notification
	Order = &Q.Order
	Payment = &Q.Payment
	Persona = &Q.Persona
	Plugin = &Q.Plugin
	Product = &Q.Product
	Reward = &Q.Reward
	Signin = &Q.Signin
	Turnover = &Q.Turnover
	UploadRecord = &Q.UploadRecord
	User = &Q.User
	WithdrawalRecord = &Q.WithdrawalRecord
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Action:           newAction(db, opts...),
		Aikey:            newAikey(db, opts...),
		AmountDetail:     newAmountDetail(db, opts...),
		Carmi:            newCarmi(db, opts...),
		Cashback:         newCashback(db, opts...),
		Config:           newConfig(db, opts...),
		Dialog:           newDialog(db, opts...),
		DrawRecord:       newDrawRecord(db, opts...),
		InstalledPlugin:  newInstalledPlugin(db, opts...),
		InviteRecord:     newInviteRecord(db, opts...),
		Message:          newMessage(db, opts...),
		Notification:     newNotification(db, opts...),
		Order:            newOrder(db, opts...),
		Payment:          newPayment(db, opts...),
		Persona:          newPersona(db, opts...),
		Plugin:           newPlugin(db, opts...),
		Product:          newProduct(db, opts...),
		Reward:           newReward(db, opts...),
		Signin:           newSignin(db, opts...),
		Turnover:         newTurnover(db, opts...),
		UploadRecord:     newUploadRecord(db, opts...),
		User:             newUser(db, opts...),
		WithdrawalRecord: newWithdrawalRecord(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Action           action
	Aikey            aikey
	AmountDetail     amountDetail
	Carmi            carmi
	Cashback         cashback
	Config           config
	Dialog           dialog
	DrawRecord       drawRecord
	InstalledPlugin  installedPlugin
	InviteRecord     inviteRecord
	Message          message
	Notification     notification
	Order            order
	Payment          payment
	Persona          persona
	Plugin           plugin
	Product          product
	Reward           reward
	Signin           signin
	Turnover         turnover
	UploadRecord     uploadRecord
	User             user
	WithdrawalRecord withdrawalRecord
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Action:           q.Action.clone(db),
		Aikey:            q.Aikey.clone(db),
		AmountDetail:     q.AmountDetail.clone(db),
		Carmi:            q.Carmi.clone(db),
		Cashback:         q.Cashback.clone(db),
		Config:           q.Config.clone(db),
		Dialog:           q.Dialog.clone(db),
		DrawRecord:       q.DrawRecord.clone(db),
		InstalledPlugin:  q.InstalledPlugin.clone(db),
		InviteRecord:     q.InviteRecord.clone(db),
		Message:          q.Message.clone(db),
		Notification:     q.Notification.clone(db),
		Order:            q.Order.clone(db),
		Payment:          q.Payment.clone(db),
		Persona:          q.Persona.clone(db),
		Plugin:           q.Plugin.clone(db),
		Product:          q.Product.clone(db),
		Reward:           q.Reward.clone(db),
		Signin:           q.Signin.clone(db),
		Turnover:         q.Turnover.clone(db),
		UploadRecord:     q.UploadRecord.clone(db),
		User:             q.User.clone(db),
		WithdrawalRecord: q.WithdrawalRecord.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Action:           q.Action.replaceDB(db),
		Aikey:            q.Aikey.replaceDB(db),
		AmountDetail:     q.AmountDetail.replaceDB(db),
		Carmi:            q.Carmi.replaceDB(db),
		Cashback:         q.Cashback.replaceDB(db),
		Config:           q.Config.replaceDB(db),
		Dialog:           q.Dialog.replaceDB(db),
		DrawRecord:       q.DrawRecord.replaceDB(db),
		InstalledPlugin:  q.InstalledPlugin.replaceDB(db),
		InviteRecord:     q.InviteRecord.replaceDB(db),
		Message:          q.Message.replaceDB(db),
		Notification:     q.Notification.replaceDB(db),
		Order:            q.Order.replaceDB(db),
		Payment:          q.Payment.replaceDB(db),
		Persona:          q.Persona.replaceDB(db),
		Plugin:           q.Plugin.replaceDB(db),
		Product:          q.Product.replaceDB(db),
		Reward:           q.Reward.replaceDB(db),
		Signin:           q.Signin.replaceDB(db),
		Turnover:         q.Turnover.replaceDB(db),
		UploadRecord:     q.UploadRecord.replaceDB(db),
		User:             q.User.replaceDB(db),
		WithdrawalRecord: q.WithdrawalRecord.replaceDB(db),
	}
}

type queryCtx struct {
	Action           IActionDo
	Aikey            IAikeyDo
	AmountDetail     IAmountDetailDo
	Carmi            ICarmiDo
	Cashback         ICashbackDo
	Config           IConfigDo
	Dialog           IDialogDo
	DrawRecord       IDrawRecordDo
	InstalledPlugin  IInstalledPluginDo
	InviteRecord     IInviteRecordDo
	Message          IMessageDo
	Notification     INotificationDo
	Order            IOrderDo
	Payment          IPaymentDo
	Persona          IPersonaDo
	Plugin           IPluginDo
	Product          IProductDo
	Reward           IRewardDo
	Signin           ISigninDo
	Turnover         ITurnoverDo
	UploadRecord     IUploadRecordDo
	User             IUserDo
	WithdrawalRecord IWithdrawalRecordDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Action:           q.Action.WithContext(ctx),
		Aikey:            q.Aikey.WithContext(ctx),
		AmountDetail:     q.AmountDetail.WithContext(ctx),
		Carmi:            q.Carmi.WithContext(ctx),
		Cashback:         q.Cashback.WithContext(ctx),
		Config:           q.Config.WithContext(ctx),
		Dialog:           q.Dialog.WithContext(ctx),
		DrawRecord:       q.DrawRecord.WithContext(ctx),
		InstalledPlugin:  q.InstalledPlugin.WithContext(ctx),
		InviteRecord:     q.InviteRecord.WithContext(ctx),
		Message:          q.Message.WithContext(ctx),
		Notification:     q.Notification.WithContext(ctx),
		Order:            q.Order.WithContext(ctx),
		Payment:          q.Payment.WithContext(ctx),
		Persona:          q.Persona.WithContext(ctx),
		Plugin:           q.Plugin.WithContext(ctx),
		Product:          q.Product.WithContext(ctx),
		Reward:           q.Reward.WithContext(ctx),
		Signin:           q.Signin.WithContext(ctx),
		Turnover:         q.Turnover.WithContext(ctx),
		UploadRecord:     q.UploadRecord.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		WithdrawalRecord: q.WithdrawalRecord.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
