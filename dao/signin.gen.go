// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chatgpt-web-new-go/model"
)

func newSignin(db *gorm.DB, opts ...gen.DOOption) signin {
	_signin := signin{}

	_signin.signinDo.UseDB(db, opts...)
	_signin.signinDo.UseModel(&model.Signin{})

	tableName := _signin.signinDo.TableName()
	_signin.ALL = field.NewAsterisk(tableName)
	_signin.ID = field.NewInt64(tableName, "id")
	_signin.UserID = field.NewInt64(tableName, "user_id")
	_signin.IP = field.NewString(tableName, "ip")
	_signin.Status = field.NewInt32(tableName, "status")
	_signin.CreateTime = field.NewTime(tableName, "create_time")
	_signin.UpdateTime = field.NewTime(tableName, "update_time")
	_signin.IsDelete = field.NewInt32(tableName, "is_delete")

	_signin.fillFieldMap()

	return _signin
}

type signin struct {
	signinDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64
	IP         field.String
	Status     field.Int32
	CreateTime field.Time
	UpdateTime field.Time
	IsDelete   field.Int32

	fieldMap map[string]field.Expr
}

func (s signin) Table(newTableName string) *signin {
	s.signinDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s signin) As(alias string) *signin {
	s.signinDo.DO = *(s.signinDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *signin) updateTableName(table string) *signin {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.IP = field.NewString(table, "ip")
	s.Status = field.NewInt32(table, "status")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.IsDelete = field.NewInt32(table, "is_delete")

	s.fillFieldMap()

	return s
}

func (s *signin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *signin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["ip"] = s.IP
	s.fieldMap["status"] = s.Status
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["is_delete"] = s.IsDelete
}

func (s signin) clone(db *gorm.DB) signin {
	s.signinDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s signin) replaceDB(db *gorm.DB) signin {
	s.signinDo.ReplaceDB(db)
	return s
}

type signinDo struct{ gen.DO }

type ISigninDo interface {
	gen.SubQuery
	Debug() ISigninDo
	WithContext(ctx context.Context) ISigninDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISigninDo
	WriteDB() ISigninDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISigninDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISigninDo
	Not(conds ...gen.Condition) ISigninDo
	Or(conds ...gen.Condition) ISigninDo
	Select(conds ...field.Expr) ISigninDo
	Where(conds ...gen.Condition) ISigninDo
	Order(conds ...field.Expr) ISigninDo
	Distinct(cols ...field.Expr) ISigninDo
	Omit(cols ...field.Expr) ISigninDo
	Join(table schema.Tabler, on ...field.Expr) ISigninDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISigninDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISigninDo
	Group(cols ...field.Expr) ISigninDo
	Having(conds ...gen.Condition) ISigninDo
	Limit(limit int) ISigninDo
	Offset(offset int) ISigninDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISigninDo
	Unscoped() ISigninDo
	Create(values ...*model.Signin) error
	CreateInBatches(values []*model.Signin, batchSize int) error
	Save(values ...*model.Signin) error
	First() (*model.Signin, error)
	Take() (*model.Signin, error)
	Last() (*model.Signin, error)
	Find() ([]*model.Signin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Signin, err error)
	FindInBatches(result *[]*model.Signin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Signin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISigninDo
	Assign(attrs ...field.AssignExpr) ISigninDo
	Joins(fields ...field.RelationField) ISigninDo
	Preload(fields ...field.RelationField) ISigninDo
	FirstOrInit() (*model.Signin, error)
	FirstOrCreate() (*model.Signin, error)
	FindByPage(offset int, limit int) (result []*model.Signin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISigninDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.Signin, err error)
}

// FilterWithNameAndRole SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (s signinDo) FilterWithNameAndRole(name string, role string) (result []model.Signin, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM signin WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s signinDo) Debug() ISigninDo {
	return s.withDO(s.DO.Debug())
}

func (s signinDo) WithContext(ctx context.Context) ISigninDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s signinDo) ReadDB() ISigninDo {
	return s.Clauses(dbresolver.Read)
}

func (s signinDo) WriteDB() ISigninDo {
	return s.Clauses(dbresolver.Write)
}

func (s signinDo) Session(config *gorm.Session) ISigninDo {
	return s.withDO(s.DO.Session(config))
}

func (s signinDo) Clauses(conds ...clause.Expression) ISigninDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s signinDo) Returning(value interface{}, columns ...string) ISigninDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s signinDo) Not(conds ...gen.Condition) ISigninDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s signinDo) Or(conds ...gen.Condition) ISigninDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s signinDo) Select(conds ...field.Expr) ISigninDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s signinDo) Where(conds ...gen.Condition) ISigninDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s signinDo) Order(conds ...field.Expr) ISigninDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s signinDo) Distinct(cols ...field.Expr) ISigninDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s signinDo) Omit(cols ...field.Expr) ISigninDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s signinDo) Join(table schema.Tabler, on ...field.Expr) ISigninDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s signinDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISigninDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s signinDo) RightJoin(table schema.Tabler, on ...field.Expr) ISigninDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s signinDo) Group(cols ...field.Expr) ISigninDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s signinDo) Having(conds ...gen.Condition) ISigninDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s signinDo) Limit(limit int) ISigninDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s signinDo) Offset(offset int) ISigninDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s signinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISigninDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s signinDo) Unscoped() ISigninDo {
	return s.withDO(s.DO.Unscoped())
}

func (s signinDo) Create(values ...*model.Signin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s signinDo) CreateInBatches(values []*model.Signin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s signinDo) Save(values ...*model.Signin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s signinDo) First() (*model.Signin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signin), nil
	}
}

func (s signinDo) Take() (*model.Signin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signin), nil
	}
}

func (s signinDo) Last() (*model.Signin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signin), nil
	}
}

func (s signinDo) Find() ([]*model.Signin, error) {
	result, err := s.DO.Find()
	return result.([]*model.Signin), err
}

func (s signinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Signin, err error) {
	buf := make([]*model.Signin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s signinDo) FindInBatches(result *[]*model.Signin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s signinDo) Attrs(attrs ...field.AssignExpr) ISigninDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s signinDo) Assign(attrs ...field.AssignExpr) ISigninDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s signinDo) Joins(fields ...field.RelationField) ISigninDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s signinDo) Preload(fields ...field.RelationField) ISigninDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s signinDo) FirstOrInit() (*model.Signin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signin), nil
	}
}

func (s signinDo) FirstOrCreate() (*model.Signin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Signin), nil
	}
}

func (s signinDo) FindByPage(offset int, limit int) (result []*model.Signin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s signinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s signinDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s signinDo) Delete(models ...*model.Signin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *signinDo) withDO(do gen.Dao) *signinDo {
	s.DO = *do.(*gen.DO)
	return s
}
