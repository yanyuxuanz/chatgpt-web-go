// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chatgpt-web-new-go/model"
)

func newDrawRecord(db *gorm.DB, opts ...gen.DOOption) drawRecord {
	_drawRecord := drawRecord{}

	_drawRecord.drawRecordDo.UseDB(db, opts...)
	_drawRecord.drawRecordDo.UseModel(&model.DrawRecord{})

	tableName := _drawRecord.drawRecordDo.TableName()
	_drawRecord.ALL = field.NewAsterisk(tableName)
	_drawRecord.ID = field.NewInt64(tableName, "id")
	_drawRecord.UserID = field.NewInt64(tableName, "user_id")
	_drawRecord.InsetImageURL = field.NewString(tableName, "inset_image_url")
	_drawRecord.Images = field.NewString(tableName, "images")
	_drawRecord.Prompt = field.NewString(tableName, "prompt")
	_drawRecord.Model = field.NewString(tableName, "model")
	_drawRecord.Params = field.NewString(tableName, "params")
	_drawRecord.TakeTime = field.NewInt32(tableName, "take_time")
	_drawRecord.Size = field.NewString(tableName, "size")
	_drawRecord.Status = field.NewInt32(tableName, "status")
	_drawRecord.CreateTime = field.NewTime(tableName, "create_time")
	_drawRecord.UpdateTime = field.NewTime(tableName, "update_time")
	_drawRecord.IsDelete = field.NewInt32(tableName, "is_delete")

	_drawRecord.fillFieldMap()

	return _drawRecord
}

type drawRecord struct {
	drawRecordDo

	ALL           field.Asterisk
	ID            field.Int64
	UserID        field.Int64  // 用户id
	InsetImageURL field.String // 插入图
	Images        field.String // 生成图
	Prompt        field.String // 生成提示词
	Model         field.String // 使用模型
	Params        field.String // 附加参数
	TakeTime      field.Int32  // 占用时间
	Size          field.String // 生成尺寸
	Status        field.Int32  // 状态 0被删 1公开 4私有
	CreateTime    field.Time
	UpdateTime    field.Time
	IsDelete      field.Int32

	fieldMap map[string]field.Expr
}

func (d drawRecord) Table(newTableName string) *drawRecord {
	d.drawRecordDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d drawRecord) As(alias string) *drawRecord {
	d.drawRecordDo.DO = *(d.drawRecordDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *drawRecord) updateTableName(table string) *drawRecord {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.UserID = field.NewInt64(table, "user_id")
	d.InsetImageURL = field.NewString(table, "inset_image_url")
	d.Images = field.NewString(table, "images")
	d.Prompt = field.NewString(table, "prompt")
	d.Model = field.NewString(table, "model")
	d.Params = field.NewString(table, "params")
	d.TakeTime = field.NewInt32(table, "take_time")
	d.Size = field.NewString(table, "size")
	d.Status = field.NewInt32(table, "status")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")
	d.IsDelete = field.NewInt32(table, "is_delete")

	d.fillFieldMap()

	return d
}

func (d *drawRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *drawRecord) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["id"] = d.ID
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["inset_image_url"] = d.InsetImageURL
	d.fieldMap["images"] = d.Images
	d.fieldMap["prompt"] = d.Prompt
	d.fieldMap["model"] = d.Model
	d.fieldMap["params"] = d.Params
	d.fieldMap["take_time"] = d.TakeTime
	d.fieldMap["size"] = d.Size
	d.fieldMap["status"] = d.Status
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
	d.fieldMap["is_delete"] = d.IsDelete
}

func (d drawRecord) clone(db *gorm.DB) drawRecord {
	d.drawRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d drawRecord) replaceDB(db *gorm.DB) drawRecord {
	d.drawRecordDo.ReplaceDB(db)
	return d
}

type drawRecordDo struct{ gen.DO }

type IDrawRecordDo interface {
	gen.SubQuery
	Debug() IDrawRecordDo
	WithContext(ctx context.Context) IDrawRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDrawRecordDo
	WriteDB() IDrawRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDrawRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDrawRecordDo
	Not(conds ...gen.Condition) IDrawRecordDo
	Or(conds ...gen.Condition) IDrawRecordDo
	Select(conds ...field.Expr) IDrawRecordDo
	Where(conds ...gen.Condition) IDrawRecordDo
	Order(conds ...field.Expr) IDrawRecordDo
	Distinct(cols ...field.Expr) IDrawRecordDo
	Omit(cols ...field.Expr) IDrawRecordDo
	Join(table schema.Tabler, on ...field.Expr) IDrawRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDrawRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDrawRecordDo
	Group(cols ...field.Expr) IDrawRecordDo
	Having(conds ...gen.Condition) IDrawRecordDo
	Limit(limit int) IDrawRecordDo
	Offset(offset int) IDrawRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDrawRecordDo
	Unscoped() IDrawRecordDo
	Create(values ...*model.DrawRecord) error
	CreateInBatches(values []*model.DrawRecord, batchSize int) error
	Save(values ...*model.DrawRecord) error
	First() (*model.DrawRecord, error)
	Take() (*model.DrawRecord, error)
	Last() (*model.DrawRecord, error)
	Find() ([]*model.DrawRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DrawRecord, err error)
	FindInBatches(result *[]*model.DrawRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DrawRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDrawRecordDo
	Assign(attrs ...field.AssignExpr) IDrawRecordDo
	Joins(fields ...field.RelationField) IDrawRecordDo
	Preload(fields ...field.RelationField) IDrawRecordDo
	FirstOrInit() (*model.DrawRecord, error)
	FirstOrCreate() (*model.DrawRecord, error)
	FindByPage(offset int, limit int) (result []*model.DrawRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDrawRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.DrawRecord, err error)
}

// FilterWithNameAndRole SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (d drawRecordDo) FilterWithNameAndRole(name string, role string) (result []model.DrawRecord, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM draw_record WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d drawRecordDo) Debug() IDrawRecordDo {
	return d.withDO(d.DO.Debug())
}

func (d drawRecordDo) WithContext(ctx context.Context) IDrawRecordDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d drawRecordDo) ReadDB() IDrawRecordDo {
	return d.Clauses(dbresolver.Read)
}

func (d drawRecordDo) WriteDB() IDrawRecordDo {
	return d.Clauses(dbresolver.Write)
}

func (d drawRecordDo) Session(config *gorm.Session) IDrawRecordDo {
	return d.withDO(d.DO.Session(config))
}

func (d drawRecordDo) Clauses(conds ...clause.Expression) IDrawRecordDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d drawRecordDo) Returning(value interface{}, columns ...string) IDrawRecordDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d drawRecordDo) Not(conds ...gen.Condition) IDrawRecordDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d drawRecordDo) Or(conds ...gen.Condition) IDrawRecordDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d drawRecordDo) Select(conds ...field.Expr) IDrawRecordDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d drawRecordDo) Where(conds ...gen.Condition) IDrawRecordDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d drawRecordDo) Order(conds ...field.Expr) IDrawRecordDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d drawRecordDo) Distinct(cols ...field.Expr) IDrawRecordDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d drawRecordDo) Omit(cols ...field.Expr) IDrawRecordDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d drawRecordDo) Join(table schema.Tabler, on ...field.Expr) IDrawRecordDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d drawRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDrawRecordDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d drawRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IDrawRecordDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d drawRecordDo) Group(cols ...field.Expr) IDrawRecordDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d drawRecordDo) Having(conds ...gen.Condition) IDrawRecordDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d drawRecordDo) Limit(limit int) IDrawRecordDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d drawRecordDo) Offset(offset int) IDrawRecordDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d drawRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDrawRecordDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d drawRecordDo) Unscoped() IDrawRecordDo {
	return d.withDO(d.DO.Unscoped())
}

func (d drawRecordDo) Create(values ...*model.DrawRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d drawRecordDo) CreateInBatches(values []*model.DrawRecord, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d drawRecordDo) Save(values ...*model.DrawRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d drawRecordDo) First() (*model.DrawRecord, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DrawRecord), nil
	}
}

func (d drawRecordDo) Take() (*model.DrawRecord, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DrawRecord), nil
	}
}

func (d drawRecordDo) Last() (*model.DrawRecord, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DrawRecord), nil
	}
}

func (d drawRecordDo) Find() ([]*model.DrawRecord, error) {
	result, err := d.DO.Find()
	return result.([]*model.DrawRecord), err
}

func (d drawRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DrawRecord, err error) {
	buf := make([]*model.DrawRecord, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d drawRecordDo) FindInBatches(result *[]*model.DrawRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d drawRecordDo) Attrs(attrs ...field.AssignExpr) IDrawRecordDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d drawRecordDo) Assign(attrs ...field.AssignExpr) IDrawRecordDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d drawRecordDo) Joins(fields ...field.RelationField) IDrawRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d drawRecordDo) Preload(fields ...field.RelationField) IDrawRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d drawRecordDo) FirstOrInit() (*model.DrawRecord, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DrawRecord), nil
	}
}

func (d drawRecordDo) FirstOrCreate() (*model.DrawRecord, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DrawRecord), nil
	}
}

func (d drawRecordDo) FindByPage(offset int, limit int) (result []*model.DrawRecord, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d drawRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d drawRecordDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d drawRecordDo) Delete(models ...*model.DrawRecord) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *drawRecordDo) withDO(do gen.Dao) *drawRecordDo {
	d.DO = *do.(*gen.DO)
	return d
}
