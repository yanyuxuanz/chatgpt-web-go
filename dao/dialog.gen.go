// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"chatgpt-web-new-go/model"
)

func newDialog(db *gorm.DB, opts ...gen.DOOption) dialog {
	_dialog := dialog{}

	_dialog.dialogDo.UseDB(db, opts...)
	_dialog.dialogDo.UseModel(&model.Dialog{})

	tableName := _dialog.dialogDo.TableName()
	_dialog.ALL = field.NewAsterisk(tableName)
	_dialog.ID = field.NewInt64(tableName, "id")
	_dialog.Issue = field.NewString(tableName, "issue")
	_dialog.Answer = field.NewString(tableName, "answer")
	_dialog.Models = field.NewString(tableName, "models")
	_dialog.Delay = field.NewInt32(tableName, "delay")
	_dialog.Status = field.NewInt32(tableName, "status")
	_dialog.CreateTime = field.NewTime(tableName, "create_time")
	_dialog.UpdateTime = field.NewTime(tableName, "update_time")
	_dialog.IsDelete = field.NewInt32(tableName, "is_delete")

	_dialog.fillFieldMap()

	return _dialog
}

type dialog struct {
	dialogDo

	ALL        field.Asterisk
	ID         field.Int64
	Issue      field.String
	Answer     field.String
	Models     field.String
	Delay      field.Int32
	Status     field.Int32
	CreateTime field.Time
	UpdateTime field.Time
	IsDelete   field.Int32

	fieldMap map[string]field.Expr
}

func (d dialog) Table(newTableName string) *dialog {
	d.dialogDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dialog) As(alias string) *dialog {
	d.dialogDo.DO = *(d.dialogDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dialog) updateTableName(table string) *dialog {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Issue = field.NewString(table, "issue")
	d.Answer = field.NewString(table, "answer")
	d.Models = field.NewString(table, "models")
	d.Delay = field.NewInt32(table, "delay")
	d.Status = field.NewInt32(table, "status")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")
	d.IsDelete = field.NewInt32(table, "is_delete")

	d.fillFieldMap()

	return d
}

func (d *dialog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dialog) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["issue"] = d.Issue
	d.fieldMap["answer"] = d.Answer
	d.fieldMap["models"] = d.Models
	d.fieldMap["delay"] = d.Delay
	d.fieldMap["status"] = d.Status
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
	d.fieldMap["is_delete"] = d.IsDelete
}

func (d dialog) clone(db *gorm.DB) dialog {
	d.dialogDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dialog) replaceDB(db *gorm.DB) dialog {
	d.dialogDo.ReplaceDB(db)
	return d
}

type dialogDo struct{ gen.DO }

type IDialogDo interface {
	gen.SubQuery
	Debug() IDialogDo
	WithContext(ctx context.Context) IDialogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDialogDo
	WriteDB() IDialogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDialogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDialogDo
	Not(conds ...gen.Condition) IDialogDo
	Or(conds ...gen.Condition) IDialogDo
	Select(conds ...field.Expr) IDialogDo
	Where(conds ...gen.Condition) IDialogDo
	Order(conds ...field.Expr) IDialogDo
	Distinct(cols ...field.Expr) IDialogDo
	Omit(cols ...field.Expr) IDialogDo
	Join(table schema.Tabler, on ...field.Expr) IDialogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDialogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDialogDo
	Group(cols ...field.Expr) IDialogDo
	Having(conds ...gen.Condition) IDialogDo
	Limit(limit int) IDialogDo
	Offset(offset int) IDialogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDialogDo
	Unscoped() IDialogDo
	Create(values ...*model.Dialog) error
	CreateInBatches(values []*model.Dialog, batchSize int) error
	Save(values ...*model.Dialog) error
	First() (*model.Dialog, error)
	Take() (*model.Dialog, error)
	Last() (*model.Dialog, error)
	Find() ([]*model.Dialog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dialog, err error)
	FindInBatches(result *[]*model.Dialog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dialog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDialogDo
	Assign(attrs ...field.AssignExpr) IDialogDo
	Joins(fields ...field.RelationField) IDialogDo
	Preload(fields ...field.RelationField) IDialogDo
	FirstOrInit() (*model.Dialog, error)
	FirstOrCreate() (*model.Dialog, error)
	FindByPage(offset int, limit int) (result []*model.Dialog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDialogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.Dialog, err error)
}

// FilterWithNameAndRole SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (d dialogDo) FilterWithNameAndRole(name string, role string) (result []model.Dialog, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM dialog WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d dialogDo) Debug() IDialogDo {
	return d.withDO(d.DO.Debug())
}

func (d dialogDo) WithContext(ctx context.Context) IDialogDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dialogDo) ReadDB() IDialogDo {
	return d.Clauses(dbresolver.Read)
}

func (d dialogDo) WriteDB() IDialogDo {
	return d.Clauses(dbresolver.Write)
}

func (d dialogDo) Session(config *gorm.Session) IDialogDo {
	return d.withDO(d.DO.Session(config))
}

func (d dialogDo) Clauses(conds ...clause.Expression) IDialogDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dialogDo) Returning(value interface{}, columns ...string) IDialogDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dialogDo) Not(conds ...gen.Condition) IDialogDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dialogDo) Or(conds ...gen.Condition) IDialogDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dialogDo) Select(conds ...field.Expr) IDialogDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dialogDo) Where(conds ...gen.Condition) IDialogDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dialogDo) Order(conds ...field.Expr) IDialogDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dialogDo) Distinct(cols ...field.Expr) IDialogDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dialogDo) Omit(cols ...field.Expr) IDialogDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dialogDo) Join(table schema.Tabler, on ...field.Expr) IDialogDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dialogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDialogDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dialogDo) RightJoin(table schema.Tabler, on ...field.Expr) IDialogDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dialogDo) Group(cols ...field.Expr) IDialogDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dialogDo) Having(conds ...gen.Condition) IDialogDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dialogDo) Limit(limit int) IDialogDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dialogDo) Offset(offset int) IDialogDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dialogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDialogDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dialogDo) Unscoped() IDialogDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dialogDo) Create(values ...*model.Dialog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dialogDo) CreateInBatches(values []*model.Dialog, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dialogDo) Save(values ...*model.Dialog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dialogDo) First() (*model.Dialog, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dialog), nil
	}
}

func (d dialogDo) Take() (*model.Dialog, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dialog), nil
	}
}

func (d dialogDo) Last() (*model.Dialog, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dialog), nil
	}
}

func (d dialogDo) Find() ([]*model.Dialog, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dialog), err
}

func (d dialogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dialog, err error) {
	buf := make([]*model.Dialog, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dialogDo) FindInBatches(result *[]*model.Dialog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dialogDo) Attrs(attrs ...field.AssignExpr) IDialogDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dialogDo) Assign(attrs ...field.AssignExpr) IDialogDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dialogDo) Joins(fields ...field.RelationField) IDialogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dialogDo) Preload(fields ...field.RelationField) IDialogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dialogDo) FirstOrInit() (*model.Dialog, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dialog), nil
	}
}

func (d dialogDo) FirstOrCreate() (*model.Dialog, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dialog), nil
	}
}

func (d dialogDo) FindByPage(offset int, limit int) (result []*model.Dialog, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dialogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dialogDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dialogDo) Delete(models ...*model.Dialog) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dialogDo) withDO(do gen.Dao) *dialogDo {
	d.DO = *do.(*gen.DO)
	return d
}
